# values.yaml
  
acrLoginServer : "PLACEHOLDER_ACR_LOGIN_SERVER" # Replace with your Azure Container Registry login server URL
# --- Backend Configuration ---
backend:
  replicaCount: 1
  image:
    name: "ts-backend"
    pullPolicy: Always
    tag: "0.3.0"

  service:
    type: ClusterIP
    port: 5000 # Port the backend service will listen on

  # Service Account for the Backend (defined in templates/serviceaccount.yaml)
  # This SA is linked to the UAMI that has permissions for app-db-user, app-db-password, and app-master-encryption-key
  serviceAccount:
    create: true # Set to false if you are managing the SA outside this chart
    # This name 'secret-sharer-backend-sa' is used by templates/serviceaccount.yaml
    name: "ts-backend-sa"
    annotations: {} # Default annotations from template will use backend.keyVault.userAssignedIdentityClientID
  rbac:
    create: true
    # serviceAccountName is already defined under backend.serviceAccount.name
  # Configuration for Azure Key Vault access by the Backend pod
  keyVault:
    name: "PLACEHOLDER_KEYVAULT_NAME"
    tenantId: PLACEHOLDER_TENANT_ID
    userAssignedIdentityClientID: "PLACEHOLDER_BACKEND_UAMI_CLIENT_ID" # Client ID for Backend UAMI
    secrets:
      # These are the names of the secrets *in Azure Key Vault* that the backend needs.
      cosmosDbKey: "cosmos-db-primary-key"         # AKV secret name for Cosmos DB primary key
      appMasterKey: "encryption-key"    # AKV secret name for the application's master encryption key
  probes:
    liveness:
      initialDelaySeconds: 15
      periodSeconds: 20
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readiness: # New values
      initialDelaySeconds: 5 # Can be shorter than liveness for DB once it's up
      periodSeconds: 15
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
  resources:
    limits:
      cpu: "500m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  # Environment variables for the backend
  env:
    # AZURE_CLIENT_ID will be set by Helm --set command during deployment
    # Example: AZURE_CLIENT_ID: "12345678-1234-1234-1234-123456789012"
# --- Cosmos DB Configuration ---
cosmosdb:
  # Cosmos DB will be provisioned externally via Azure infrastructure
  # These values are used to configure the connection from the backend
  endpoint: "PLACEHOLDER_COSMOS_DB_ENDPOINT"
  databaseName: "tsdb"
  containerName: "secrets"
  # Use managed identity for authentication (set to true for AKS with Workload Identity)
  useManagedIdentity: true

# --- Frontend Configuration ---
frontend:
  replicaCount: 1
  image:
    name: "ts-frontend"
    pullPolicy: Always
    tag: "0.3.0"

  probes:
    liveness:
      initialDelaySeconds: 10
      periodSeconds: 15
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readiness: 
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
  service:
    type: ClusterIP # Will be ClusterIP, exposed via Ingress later
    port: 8080 # Port Nginx listens on and service exposes
  resources:
    limits:
      cpu: "200m"
      memory: "128Mi"
    requests:
      cpu: "50m"
      memory: "64Mi"
# --- Ingress Configuration (MVP Scope: basic definition, to be enabled in Phase 2/6) ---
ingress:
  enabled: true 
  className: "azure-application-gateway" # For Kubernetes v1.18+ with IngressClass resource, if needed
  annotations:
    # AGIC path rewrite annotation removed to preserve original path to backend
    # appgw.ingress.kubernetes.io/backend-path-prefix: 
  hosts:
    - host: "transio.local" 
      paths:
        frontend: # Configures the first path rule in ingress.yaml
          path: "/"
          pathType: Prefix
        backend:  # Configures the second path rule in ingress.yaml
          path: "/api" # External path for your API
          pathType: Prefix

networkPolicies:
  create: true # Set to false to disable creation of all network policies defined in the chart
