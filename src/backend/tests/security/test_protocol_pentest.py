# backend/tests/test_protocol_pentest.py
import pytest
import json
import time
import socket
import threading
import base64
from unittest.mock import patch, Mock

from backend.app.storage import (
    store_encrypted_secret,
    retrieve_and_delete_secret,
    check_secret_exists
)
from backend.app.encryption import encrypt_secret, decrypt_secret
from backend.app.models import Secret
from backend.app import db


class TestProtocolLevelAttacks:
    """Test protocol-level attack vectors."""
    
    def test_http_request_smuggling_attempts(self, client):
        """Test HTTP request smuggling attack attempts."""
        # Test malformed Content-Length headers
        malformed_requests = [
            # Conflicting Content-Length headers would be handled by the WSGI server
            # Test payload that might confuse parsers
            {"secret": "GET /api/share HTTP/1.1\r\nHost: evil.com\r\n\r\n"},
            {"secret": "POST /api/share HTTP/1.1\r\nContent-Length: 0\r\n\r\n"},
            {"secret": "\r\n\r\nGET /admin HTTP/1.1\r\nHost: evil.com\r\n\r\n"},
        ]
        
        for payload in malformed_requests:
            response = client.post('/api/share',
                                  data=json.dumps(payload),
                                  content_type='application/json')
            
            # Should handle as normal secret content, not as HTTP commands
            assert response.status_code == 201
            
            data = json.loads(response.data)
            link_id = data['link_id']
            
            # Retrieve and verify it's stored as literal text
            retrieve_response = client.get(f'/api/share/secret/{link_id}')
            retrieved_data = json.loads(retrieve_response.data)
            assert retrieved_data['secret'] == payload['secret']
    
    def test_http_header_injection_attempts(self, client):
        """Test HTTP header injection attempts."""
        header_injection_payloads = [
            "test\r\nX-Injected: malicious",
            "test\nSet-Cookie: admin=true",
            "test\r\nLocation: http://evil.com",
            "test\r\n\r\n<script>alert('XSS')</script>",
            "test\x0aX-Custom: injected",
            "test\x0dX-Custom: injected",
        ]
        
        for payload in header_injection_payloads:
            secret_data = {"secret": payload}
            response = client.post('/api/share',
                                  data=json.dumps(secret_data),
                                  content_type='application/json')
            
            assert response.status_code == 201
            
            # Verify no additional headers were injected
            assert 'X-Injected' not in response.headers
            assert 'X-Custom' not in response.headers
            
            data = json.loads(response.data)
            link_id = data['link_id']
            
            # Retrieve and verify
            retrieve_response = client.get(f'/api/share/secret/{link_id}')
            assert 'X-Injected' not in retrieve_response.headers
            assert 'X-Custom' not in retrieve_response.headers
            
            retrieved_data = json.loads(retrieve_response.data)
            assert retrieved_data['secret'] == payload
    
    def test_http_response_splitting_attempts(self, client):
        """Test HTTP response splitting attempts."""
        response_splitting_payloads = [
            "test\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<script>alert('XSS')</script>",
            "test\x0d\x0a\x0d\x0aHTTP/1.1 302 Found\x0d\x0aLocation: http://evil.com\x0d\x0a\x0d\x0a",
            "test\n\nHTTP/1.1 401 Unauthorized\n\n<h1>Unauthorized</h1>",
        ]
        
        for payload in response_splitting_payloads:
            secret_data = {"secret": payload}
            response = client.post('/api/share',
                                  data=json.dumps(secret_data),
                                  content_type='application/json')
            
            assert response.status_code == 201
            
            # Response should remain properly formatted JSON
            data = json.loads(response.data)
            assert 'link_id' in data
            
            # Verify no response splitting occurred
            assert response.headers['Content-Type'] == 'application/json'
    
    def test_http_parameter_pollution(self, client):
        """Test HTTP parameter pollution attacks."""
        # Test multiple JSON keys with same name (should be handled by JSON parser)
        malformed_json_attempts = [
            '{"secret": "first", "secret": "second"}',  # Duplicate keys
            '{"secret": "test", "secret": "override"}',
        ]
        
        for json_str in malformed_json_attempts:
            response = client.post('/api/share',
                                  data=json_str,
                                  content_type='application/json')
            
            # Should either succeed with one value or fail due to malformed JSON
            assert response.status_code in [201, 400]
            
            if response.status_code == 201:
                # If successful, verify only one secret value was used
                data = json.loads(response.data)
                link_id = data['link_id']
                
                retrieve_response = client.get(f'/api/share/secret/{link_id}')
                retrieved_data = json.loads(retrieve_response.data)
                
                # Should be one of the values, not both
                assert retrieved_data['secret'] in ['first', 'second', 'test', 'override']


class TestNetworkLevelAttacks:
    """Test network-level attack vectors."""
    
    def test_slowloris_simulation(self, client):
        """Test Slowloris-style slow HTTP attacks."""
        # Simulate slow request by sending data in small chunks
        # Note: This is limited by the test client, but tests basic handling
        
        large_secret = "A" * (90 * 1024)  # 90KB secret (just under limit)
        secret_data = {"secret": large_secret}
        
        start_time = time.time()
        response = client.post('/api/share',
                              data=json.dumps(secret_data),
                              content_type='application/json')
        end_time = time.time()
        
        # Should handle large requests within reasonable time
        assert (end_time - start_time) < 5.0, "Large request should not hang"
        assert response.status_code == 201, "Should accept request just under size limit"
    
    def test_connection_exhaustion_simulation(self, client):
        """Test connection exhaustion attacks."""
        # Simulate multiple rapid connections
        responses = []
        
        start_time = time.time()
        for i in range(20):
            secret_data = {"secret": f"connection_test_{i}"}
            response = client.post('/api/share',
                                  data=json.dumps(secret_data),
                                  content_type='application/json')
            responses.append(response.status_code)
        end_time = time.time()
        
        # Should handle multiple connections
        success_count = sum(1 for status in responses if status == 201)
        assert success_count >= 15, "Should handle most connections successfully"
        
        # Should complete within reasonable time
        assert (end_time - start_time) < 10.0, "Multiple connections should not cause timeout"
    
    def test_bandwidth_exhaustion_attempts(self, client):
        """Test bandwidth exhaustion through large payloads."""
        # Test with maximum allowed payload size
        max_allowed = 99 * 1024  # Just under 100KB limit
        large_secret = "B" * max_allowed
        
        secret_data = {"secret": large_secret}
        response = client.post('/api/share',
                              data=json.dumps(secret_data),
                              content_type='application/json')
        
        # Should accept just under the limit
        assert response.status_code == 201
        
        # Verify it can be retrieved
        data = json.loads(response.data)
        link_id = data['link_id']
        
        retrieve_response = client.get(f'/api/share/secret/{link_id}')
        assert retrieve_response.status_code == 200
        
        retrieved_data = json.loads(retrieve_response.data)
        assert len(retrieved_data['secret']) == max_allowed


class TestApplicationLayerAttacks:
    """Test application layer attack vectors."""
    
    def test_cache_poisoning_attempts(self, client):
        """Test cache poisoning attack attempts."""
        # Test with cache-control headers
        cache_headers = {
            'Cache-Control': 'no-cache, no-store',
            'Pragma': 'no-cache',
            'Expires': 'Thu, 01 Jan 1970 00:00:00 GMT',
        }
        
        response = client.get('/health', headers=cache_headers)
        assert response.status_code == 200
        
        # Response should not contain cache directives that could be exploited
        response_headers = dict(response.headers)
        
        # Verify no problematic cache headers in response
        problematic_headers = ['X-Cache', 'X-Cache-Status', 'Age']
        for header in problematic_headers:
            assert header not in response_headers
    
    def test_host_header_injection(self, client):
        """Test Host header injection attacks."""
        malicious_hosts = [
            'evil.com',
            'localhost:8080@evil.com',
            'evil.com:5000',
        ]
        
        for host in malicious_hosts:
            try:
                response = client.get('/health', headers={'Host': host})
                
                # Should respond normally, not reflect malicious host
                assert response.status_code == 200
                
                # Response should not contain the malicious host
                response_text = response.get_data(as_text=True)
                assert 'evil.com' not in response_text
            except ValueError as e:
                # Some malicious hosts may be rejected by the test client itself
                if "newline" in str(e):
                    continue  # This is expected for malformed headers
                raise
    
    def test_user_agent_based_attacks(self, client):
        """Test User-Agent based attacks."""
        malicious_user_agents = [
            '<script>alert("XSS")</script>',
            'Mozilla/5.0 (compatible; Googlebot/2.1; +http://evil.com/bot.html)',
            '() { :; }; echo vulnerable',  # Shellshock
            'nikto/2.1.6',  # Security scanner
            'sqlmap/1.0',  # SQL injection tool
        ]
        
        for ua in malicious_user_agents:
            response = client.get('/health', headers={'User-Agent': ua})
            assert response.status_code == 200
            
            # Response should not echo back User-Agent
            response_text = response.get_data(as_text=True)
            assert '<script>' not in response_text
            assert 'evil.com' not in response_text
    
    def test_referer_based_attacks(self, client):
        """Test Referer header based attacks."""
        malicious_referers = [
            'http://evil.com/steal-data',
            'javascript:alert("XSS")',
            'data:text/html,<script>alert(1)</script>',
            'http://localhost:5000/admin?token=stolen',
        ]
        
        for referer in malicious_referers:
            response = client.get('/health', headers={'Referer': referer})
            assert response.status_code == 200
            
            # Should not process or reflect referer
            response_text = response.get_data(as_text=True)
            assert 'evil.com' not in response_text
            assert 'javascript:' not in response_text


class TestDatabaseLayerAttacks:
    """Test database layer attack vectors."""
    
    def test_database_connection_exhaustion(self, app_context):
        """Test database connection exhaustion attacks."""
        # Test multiple database operations rapidly
        operations = []
        
        start_time = time.time()
        for i in range(20):
            try:
                # Perform database operations
                encrypted = encrypt_secret(f"db_test_{i}")
                link_id = store_encrypted_secret(encrypted)
                exists = check_secret_exists(link_id)
                
                operations.append((link_id, exists))
            except Exception as e:
                # Should not exhaust connections
                pytest.fail(f"Database operation failed: {e}")
        
        end_time = time.time()
        
        # All operations should succeed
        assert len(operations) == 20
        assert all(exists for _, exists in operations)
        
        # Should complete within reasonable time
        assert (end_time - start_time) < 5.0, "Database operations should not be too slow"
        
        # Cleanup
        for link_id, _ in operations:
            retrieve_and_delete_secret(link_id)
    
    def test_database_lock_attacks(self, app_context):
        """Test database operations stability."""
        results = []
        errors = []
        
        # Perform sequential operations to test database stability
        for i in range(6):
            try:
                # Perform operations that might cause locks
                encrypted = encrypt_secret(f"lock_test_{i}")
                link_id = store_encrypted_secret(encrypted)
                
                # Immediately try to retrieve
                data = retrieve_and_delete_secret(link_id)
                assert data is not None
                
                results.append(link_id)
            except Exception as e:
                errors.append(str(e))
        
        # Most operations should succeed
        assert len(results) >= 5, f"Most operations should succeed: {len(results)} successes, {len(errors)} errors"
    
    def test_database_constraint_bypass_attempts(self, app_context):
        """Test attempts to bypass database constraints."""
        # Try to store secrets with duplicate link_ids (should be prevented by DB)
        link_id = "fixed-test-uuid-1234-5678-9012"
        
        # Store first secret
        encrypted1 = encrypt_secret("first_secret")
        
        # Manually create secret with specific link_id
        secret1 = Secret(link_id=link_id, encrypted_secret=encrypted1)
        db.session.add(secret1)
        db.session.commit()
        
        # Try to store second secret with same link_id
        encrypted2 = encrypt_secret("second_secret")
        secret2 = Secret(link_id=link_id, encrypted_secret=encrypted2)
        db.session.add(secret2)
        
        # Should fail due to unique constraint
        with pytest.raises(Exception):  # IntegrityError or similar
            db.session.commit()
        
        # Rollback the failed transaction
        db.session.rollback()
        
        # Verify original secret still exists and is correct
        retrieved = retrieve_and_delete_secret(link_id)
        assert retrieved == encrypted1


class TestConcurrencyAttacks:
    """Test concurrency-related attack vectors."""
    
    def test_race_condition_secret_modification(self, client, app_context):
        """Test one-time access works correctly."""
        # Store a secret
        secret_data = {"secret": "race_test_secret"}
        response = client.post('/api/share',
                              data=json.dumps(secret_data),
                              content_type='application/json')
        
        data = json.loads(response.data)
        link_id = data['link_id']
        
        # First retrieval should succeed
        response1 = client.get(f'/api/share/secret/{link_id}')
        assert response1.status_code == 200
        
        # Second retrieval should fail
        response2 = client.get(f'/api/share/secret/{link_id}')
        assert response2.status_code == 404
    
    def test_concurrent_storage_race_conditions(self, app_context):
        """Test sequential storage operations for stability."""
        results = []
        errors = []
        
        # Perform sequential storage operations
        for i in range(9):
            try:
                encrypted = encrypt_secret(f"sequential_{i}")
                link_id = store_encrypted_secret(encrypted)
                results.append(link_id)
            except Exception as e:
                errors.append(str(e))
        
        # Most operations should succeed
        assert len(results) >= 8, f"Most storage operations should succeed: {len(results)} successes, {len(errors)} errors"
        
        # All link_ids should be unique
        assert len(set(results)) == len(results), "All generated link_ids should be unique"
        
        # Cleanup
        for link_id in results:
            try:
                retrieve_and_delete_secret(link_id)
            except:
                pass  # May already be deleted
    
    def test_deadlock_prevention(self, app_context):
        """Test database operations in different orders."""
        results = []
        
        # Perform operations in different orders sequentially
        for i in range(6):
            try:
                if i % 2 == 0:
                    # Even: store then check
                    encrypted = encrypt_secret(f"deadlock_test_{i}")
                    link_id = store_encrypted_secret(encrypted)
                    exists = check_secret_exists(link_id)
                    results.append((link_id, exists))
                else:
                    # Odd: check then store  
                    dummy_id = f"dummy-{i}"
                    exists = check_secret_exists(dummy_id)
                    encrypted = encrypt_secret(f"deadlock_test_{i}")
                    link_id = store_encrypted_secret(encrypted)
                    results.append((link_id, True))
            except Exception as e:
                results.append(f"error: {e}")
        
        # Most operations should succeed
        success_count = sum(1 for r in results if isinstance(r, tuple))
        assert success_count >= 5, f"Most operations should succeed: {success_count}/6"


class TestResourceExhaustionAttacks:
    """Test resource exhaustion attack vectors."""
    
    def test_cpu_exhaustion_through_encryption(self, app_context):
        """Test CPU exhaustion through intensive encryption operations."""
        start_time = time.time()
        
        # Perform many encryption operations
        for i in range(50):
            secret = f"cpu_test_{i}" * 100  # Make it a bit larger
            encrypted = encrypt_secret(secret)
            decrypted = decrypt_secret(encrypted)
            assert decrypted == secret
        
        end_time = time.time()
        
        # Should complete within reasonable time (not hung up)
        assert (end_time - start_time) < 10.0, "Encryption operations should not cause CPU exhaustion"
    
    def test_disk_space_exhaustion_simulation(self, client, app_context):
        """Test disk space exhaustion through large secrets."""
        # Store multiple large secrets
        large_secret = "D" * (90 * 1024)  # 90KB each
        stored_secrets = []
        
        try:
            for i in range(5):  # Try to store 5 large secrets
                secret_data = {"secret": f"{large_secret}_{i}"}
                response = client.post('/api/share',
                                      data=json.dumps(secret_data),
                                      content_type='application/json')
                
                if response.status_code == 201:
                    data = json.loads(response.data)
                    stored_secrets.append(data['link_id'])
                else:
                    # May be rejected due to size limits
                    assert response.status_code == 413
        
        finally:
            # Cleanup
            for link_id in stored_secrets:
                try:
                    client.get(f'/api/share/secret/{link_id}')
                except:
                    pass
    
    def test_file_descriptor_exhaustion(self, app_context):
        """Test file descriptor exhaustion through database connections."""
        # This is more of a stress test for the database connection handling
        operations_count = 0
        
        try:
            for i in range(100):  # Many operations
                encrypted = encrypt_secret(f"fd_test_{i}")
                link_id = store_encrypted_secret(encrypted)
                exists = check_secret_exists(link_id)
                
                if exists:
                    retrieve_and_delete_secret(link_id)
                    operations_count += 1
        
        except Exception as e:
            # Should not run out of file descriptors
            if "too many" in str(e).lower() or "file descriptor" in str(e).lower():
                pytest.fail(f"File descriptor exhaustion detected: {e}")
        
        # Should complete many operations successfully
        assert operations_count >= 90, f"Should handle many operations: {operations_count}/100"