services:
# Database Service (Cosmos DB Emulator)
  cosmosdb:
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    container_name: secure_secret_sharer_cosmosdb
    environment:
      AZURE_COSMOS_EMULATOR_PARTITION_COUNT: 2
      AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE: "true"
    ports:
      - "8081:8081"
      - "10251:10251"
      - "10252:10252"
      - "10253:10253"
      - "10254:10254"
    volumes:
      - cosmos_data:/tmp/cosmos
    healthcheck:
      test: ["CMD-SHELL", "curl -k -f https://127.0.0.1:8081/_explorer/emulator.pem || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s # Give Cosmos DB emulator more time to initialize
    restart: unless-stopped

  # Setup service to initialize the Cosmos DB emulator
  cosmossetup:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/opt/app
    command: python /opt/app/scripts/setup_cosmos_emulator.py
    depends_on:
      cosmosdb:
        condition: service_healthy
    volumes:
      - ./scripts:/opt/app/scripts
    network_mode: "service:cosmosdb"  # Use the same network as cosmosdb to access localhost:8081

  # Backend Service (Flask Application)
  backend:
    build:
      context: ./backend # Path to the directory containing the backend's Dockerfile
      dockerfile: Dockerfile # Specifies the Dockerfile name (default is Dockerfile)
    ports:
      # Maps port 5000 on the host to port 5000 in the backend container.
      # This allows you to access the Flask app via http://localhost:5000 on your machine.
      - "5000:5000"
    environment:
      # Environment variables passed to the backend container.
      # MASTER_ENCRYPTION_KEY will be interpolated by Docker Compose from the .env file
      # located in the same directory as this docker-compose.yml file.
      MASTER_ENCRYPTION_KEY: ${MASTER_ENCRYPTION_KEY}
      FLASK_APP: app.main
      FLASK_DEBUG: 'True'      # Cosmos DB emulator configuration
      COSMOS_ENDPOINT: ${COSMOS_ENDPOINT}
      COSMOS_KEY: ${COSMOS_KEY}
      COSMOS_DATABASE_NAME: ${COSMOS_DATABASE_NAME}
      COSMOS_CONTAINER_NAME: ${COSMOS_CONTAINER_NAME}
    healthcheck: # Ensure this is uncommented
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"] # Using CMD-SHELL for robustness with curl
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s # Give it time to start up
    depends_on:
      cosmossetup:
        condition: service_completed_successfully

  # Frontend Service (Nginx Server for Static Files)
  frontend:
    build:
      context: ./frontend # Path to the directory containing the frontend's Dockerfile
      dockerfile: Dockerfile
    ports:
      # Maps port 8080 on the host to port 80 in the frontend (Nginx) container.
      # Access the frontend via http://localhost:8080 on your machine.
      # Using 8080 to avoid potential conflicts if port 80 is already in use on the host.
      - "8080:8080"
    depends_on:
      backend: # Service name
        condition: service_healthy # Condition to wait for

# Top-level volumes declaration for data persistence
volumes:
  cosmos_data: # Defines the named volume used by the cosmosdb service
    driver: local
