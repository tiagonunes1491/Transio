name: 'CI - Infrastructure PR Validation'

on:
  pull_request:
    paths:
      - 'infra/**.bicep'
      - 'infra/**.bicepparam'

permissions:
  id-token: write
  contents: read
  security-events: write
  pull-requests: write

jobs:
  check_changes:
    name: 'Check for file changes'
    runs-on: ubuntu-latest
    outputs:
      bicep_required: ${{ steps.changed-files.outputs.any_changed }}
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changed-files to work properly
      
      - name: 'Find changed Bicep files'
        id: changed-files
        uses: tj-actions/changed-files@v46 
        with:
          files: |
            infra/**/*.bicep
            infra/**/*.bicepparam

  validate-bicep:
    needs: check_changes
    name: 'Validate Changed Bicep Files'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Azure CLI and Bicep'
        if: needs.check_changes.outputs.bicep_required == 'true'
        shell: bash
        run: |
          echo "üîß Setting up Azure CLI and Bicep..."
          
          # Use alternative config directory that doesn't require permissions
          export AZURE_CONFIG_DIR="${RUNNER_TEMP}/.azure"
          mkdir -p "${AZURE_CONFIG_DIR}"
          
          # Set Azure CLI environment variables to prevent permission issues
          export AZURE_CORE_COLLECT_TELEMETRY=false
          export AZURE_CORE_DISABLE_CONFIRM_PROMPT=true
          export AZURE_CORE_DISABLE_PROGRESS_BAR=true
          export AZURE_CORE_ONLY_SHOW_ERRORS=true
          export AZURE_CORE_NO_COLOR=true
          
          # Install Azure CLI (it's pre-installed on GitHub runners)
          echo "üì¶ Installing Bicep CLI..."
          az bicep install
          
          echo "üîç Verifying Bicep installation..."
          az bicep version
          
          echo "‚úÖ Bicep CLI setup complete"
        env:
          AZURE_CORE_COLLECT_TELEMETRY: false
          AZURE_CORE_DISABLE_CONFIRM_PROMPT: true
          AZURE_CORE_DISABLE_PROGRESS_BAR: true
          AZURE_CORE_ONLY_SHOW_ERRORS: true
          AZURE_CORE_NO_COLOR: true

      - name: 'Validate Changed Bicep Files'
        if: needs.check_changes.outputs.bicep_required == 'true'
        shell: bash
        env:
          # Use custom Azure config directory
          AZURE_CONFIG_DIR: ${{ runner.temp }}/.azure
          # Prevent Azure CLI permission issues
          AZURE_CORE_COLLECT_TELEMETRY: false
          AZURE_CORE_DISABLE_CONFIRM_PROMPT: true
          AZURE_CORE_DISABLE_PROGRESS_BAR: true
          AZURE_CORE_ONLY_SHOW_ERRORS: true
          AZURE_CORE_NO_COLOR: true
        run: |
          echo "üîç Found changed files: ${{ needs.check_changes.outputs.changed_files }}"

          # Ensure custom Azure config directory exists
          mkdir -p "${AZURE_CONFIG_DIR}"
          
          # Convert space-separated files to array
          IFS=' ' read -ra files <<< "${{ needs.check_changes.outputs.changed_files }}"

          failed_files=()
          
          # Initialize SARIF structure with enhanced metadata
          sarif_file="bicep-validation-results.sarif"
          cat > "$sarif_file" << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Bicep Validator",
                    "version": "1.0.0",
                    "informationUri": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/",
                    "rules": [
                      {
                        "id": "bicep-build-error",
                        "name": "BicepBuildError",
                        "shortDescription": {
                          "text": "Bicep compilation failed"
                        },
                        "helpUri": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/bicep-cli#build"
                      },
                      {
                        "id": "bicep-lint",
                        "name": "BicepLintIssue", 
                        "shortDescription": {
                          "text": "Bicep linting issue"
                        },
                        "helpUri": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/linter"
                      },
                      {
                        "id": "bicep-param-validation",
                        "name": "BicepParameterValidation",
                        "shortDescription": {
                          "text": "Bicep parameter validation failed"
                        },
                        "helpUri": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files"
                      }
                    ]
                  }
                },
                "results": [
          EOF

          result_count=0

          for file in "${files[@]}"; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üî® Processing: $file"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            
            if [[ "$file" == *.bicep ]]; then
              # Build Bicep file for syntax validation
              echo "üì¶ Building Bicep file..."
              build_output=$(mktemp)
              
              if az bicep build --file "$file" --outfile "temp-$(basename "$file" .bicep).json" 2> "$build_output"; then
                echo "‚úÖ Build successful: $file"
                rm -f "temp-$(basename "$file" .bicep).json"
              else
                echo "‚ùå Build failed: $file"
                failed_files+=("$file")
                
                # Extract actual error message from build output
                error_message=$(head -n 1 "$build_output" | sed 's/"/\\"/g')
                if [[ -z "$error_message" ]]; then
                  error_message="Bicep build failed - check syntax and references"
                fi
                
                # Add build failure to SARIF with actual error details
                if [ $result_count -gt 0 ]; then
                  echo "," >> "$sarif_file"
                fi
                cat >> "$sarif_file" << EOF
                  {
                    "ruleId": "bicep-build-error",
                    "level": "error",
                    "message": {
                      "text": "$error_message"
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "$file"
                          }
                        }
                      }
                    ]
                  }
          EOF
                result_count=$((result_count + 1))
                rm -f "$build_output"
                continue
              fi
              rm -f "$build_output"
              
              # Use az bicep lint with SARIF output for better accuracy
              echo "üîç Linting Bicep file..."
              temp_lint_sarif="temp-lint-$(basename "$file" .bicep).sarif"
              
              # Generate SARIF directly from bicep lint
              if az bicep lint --file "$file" --diagnostics-format sarif > "$temp_lint_sarif" 2>/dev/null; then
                echo "‚úÖ Lint successful: $file"
              else
                echo "‚ö†Ô∏è Lint found issues in: $file"
              fi
              
              # Merge lint SARIF results if they exist and have content
              if [[ -f "$temp_lint_sarif" && -s "$temp_lint_sarif" ]]; then
                # Extract results from the temporary SARIF and add to main SARIF
                if command -v jq >/dev/null 2>&1; then
                  while IFS= read -r result; do
                    if [[ -n "$result" && "$result" != "null" ]]; then
                      if [ $result_count -gt 0 ]; then
                        echo "," >> "$sarif_file"
                      fi
                      echo "$result" >> "$sarif_file"
                      result_count=$((result_count + 1))
                    fi
                  done <<< "$(jq -c '.runs[0].results[]?' "$temp_lint_sarif" 2>/dev/null)"
                fi
                rm -f "$temp_lint_sarif"
              fi
              
            elif [[ "$file" == *.bicepparam ]]; then
              # Validate parameter files with SARIF output
              echo "üìã Validating Bicep parameters..."
              temp_param_sarif="temp-param-$(basename "$file" .bicepparam).sarif"
              
              if az bicep lint --file "$file" --diagnostics-format sarif > "$temp_param_sarif" 2>/dev/null; then
                echo "‚úÖ Parameter validation successful: $file"
              else
                echo "‚ùå Parameter validation failed: $file"
                failed_files+=("$file")
              fi
              
              # Merge parameter SARIF results
              if [[ -f "$temp_param_sarif" && -s "$temp_param_sarif" ]]; then
                if command -v jq >/dev/null 2>&1; then
                  while IFS= read -r result; do
                    if [[ -n "$result" && "$result" != "null" ]]; then
                      if [ $result_count -gt 0 ]; then
                        echo "," >> "$sarif_file"
                      fi
                      echo "$result" >> "$sarif_file"
                      result_count=$((result_count + 1))
                    fi
                  done <<< "$(jq -c '.runs[0].results[]?' "$temp_param_sarif" 2>/dev/null)"
                fi
                rm -f "$temp_param_sarif"
              fi
            fi
            
            echo ""
          done

          # Close SARIF file
          cat >> "$sarif_file" << 'EOF'
                ]
              }
            ]
          }
          EOF

          # Validate SARIF file
          if command -v jq >/dev/null 2>&1; then
            if jq empty "$sarif_file" 2>/dev/null; then
              echo "‚úÖ Valid SARIF file generated"
            else
              echo "‚ö†Ô∏è SARIF file may have formatting issues"
            fi
          fi

          # Summary
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä VALIDATION SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Total files processed: ${#files[@]}"
          echo "Failed files: ${#failed_files[@]}"
          echo "SARIF results: $result_count"
          echo "üìÑ SARIF file created: $sarif_file"

          if [ ${#failed_files[@]} -gt 0 ]; then
            echo "‚ùå The following files failed CRITICAL validation:"
            for failed_file in "${failed_files[@]}"; do
              echo "  - $failed_file"
            done
            echo "üö® CI will fail due to critical validation errors"
            exit 1
          else
            echo "‚úÖ All Bicep files passed validation!"
            echo "üí° Check Security tab for any lint recommendations"
          fi

      - name: 'No Bicep Changes - Validation Skipped'
        if: needs.check_changes.outputs.bicep_required != 'true'
        run: |
          echo "‚ÑπÔ∏è No Bicep files changed - validation skipped"
          echo "If you expected validation to run, check that changes are in infra/ directory with .bicep or .bicepparam extensions"

      - name: 'Upload Bicep Lint SARIF'
        if: always() && needs.check_changes.outputs.bicep_required == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          category: bicep-lint-analysis
          sarif_file: bicep-validation-results.sarif

  post-comment:
    name: 'Post Validation Results Comment'
    needs: [check_changes, validate-bicep]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: 'Post Success Comment'
        if: needs.check_changes.outputs.bicep_required == 'true' && needs.validate-bicep.result == 'success'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ‚úÖ **Bicep Validation Successful**

            All Bicep files passed validation successfully! üéâ

            **Validation Results:**
            - üì¶ Bicep compilation: ‚úÖ Passed

            **What was validated:**
            - üì¶ Bicep compilation (syntax validation)
            - üîç Bicep linting (best practices)

            Great work! Your infrastructure code looks good.
          edit-mode: replace

      - name: 'Post Failure Comment'
        if: needs.check_changes.outputs.bicep_required == 'true' && needs.validate-bicep.result != 'success'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ‚ùå **Bicep Validation Failed**

            One or more Bicep files failed validation.
            Please review the [Checks tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            **Validation Results:**
            - üì¶ Bicep compilation: ${{ needs.validate-bicep.result == 'success' && '‚úÖ Passed' || needs.validate-bicep.result == 'failure' && '‚ùå Failed' || '‚è≠Ô∏è Skipped' }}

            **What was checked:**
            - üì¶ Bicep compilation (syntax validation)
            - üîç Bicep linting (best practices)

            Please fix the issues and push your changes.
          edit-mode: replace