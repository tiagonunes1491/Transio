name: CI - Helm PR Review

on:
  pull_request:
    paths:
      - 'k8s/secret-sharer-app/**'

jobs:
  # Job 1: Setup and render charts (shared dependency)
  setup:
    name: Setup and render charts
    runs-on: ubuntu-latest
    outputs:
      images_json: ${{ steps.image_extractor.outputs.images_json }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Render charts
        run: |
          mkdir -p rendered
          helm template secret-sharer-app k8s/secret-sharer-app \
            --output-dir rendered \
            --set acrLoginServer=${{ vars.ACR_NAME }}.azurecr.io

      - name: Upload rendered charts
        uses: actions/upload-artifact@v4
        with:
          name: rendered-charts
          path: rendered/

      - name: Extract public images
        id: image_extractor
        run: |
          shopt -s globstar
          ACR_DOMAIN="secureSharerACR.azurecr.io"
          IMAGES_TEXT=$(grep -rhoP 'image:\s*\K\S+' rendered/**/*.yaml | sort -u | grep -v "$ACR_DOMAIN" || true)
          IMAGES_TEXT=$(echo "$IMAGES_TEXT" | sed 's/^"//;s/"$//')
          if [[ -z "$IMAGES_TEXT" ]]; then
              echo "No public images found to scan."
              echo "images_json=[]" >> $GITHUB_OUTPUT
              exit 0
          fi
          echo "Found public images:"
          echo "$IMAGES_TEXT"
          IMAGES_JSON=$(printf '%s\n' $IMAGES_TEXT | jq -R -s 'split("\n")[:-1]' | jq -c .)
          echo "images_json=$IMAGES_JSON" >> $GITHUB_OUTPUT
          echo "Public images JSON: $IMAGES_JSON"

  # Job 2: Secret scanning (independent)
  secret-scan:
    name: Secret scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitleaks (PR diff scan)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 3: Helm linting (independent)
  helm-lint:
    name: Helm linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Run helm lint
        run: helm lint k8s/secret-sharer-app

  # Job 4: Kubernetes schema validation
  kubeconform:
    name: Kubernetes schema validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Download rendered charts
        uses: actions/download-artifact@v4
        with:
          name: rendered-charts
          path: rendered/

      - name: Install kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/download/v0.6.4/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin
          kubeconform -v

      - name: Validate manifests with kubeconform
        run: |
          find rendered -name "*.yaml" -type f | xargs kubeconform -ignore-missing-schemas -summary -verbose

  # To do - What is the purpose of this step?
  # Job 5: Security policy validation
  checkov:
    name: Security policy validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Download rendered charts
        uses: actions/download-artifact@v4
        with:
          name: rendered-charts
          path: rendered/      
      - name: K8s IaC security policies (Checkov)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: rendered
          framework: kubernetes
          quiet: true
          compact: true
          output_format: sarif
          output_file_path: checkov-results.sarif
        env:
          CHECKOV_COMPACT: true
          CHECKOV_QUIET: true

      - name: Upload Checkov scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'checkov-kubernetes-security'
  #To do - Why this? There's no external images in this repo, so no need to scan images

  # Job 6: Image vulnerability scanning
  scan-images:
    name: Image vulnerability scanning
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.images_json != '[]'
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.setup.outputs.images_json) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on ${{ matrix.image }} (SARIF)
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'image'
          image-ref: ${{ matrix.image }}
          ignore-unfixed: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Run Trivy vulnerability scanner on ${{ matrix.image }} (Table)
        uses: aquasecurity/trivy-action@0.31.0
        if: always()  # Run even if SARIF scan failed
        with:
          scan-type: 'image'

          image-ref: ${{ matrix.image }}
          ignore-unfixed: false
          format: 'table'
          severity: 'HIGH,CRITICAL'
          # Enhanced table output options for detailed vulnerability info
          scanners: 'vuln'  # Focus on vulnerabilities
          list-all-pkgs: false  # Only show packages with vulnerabilities
          exit-code: '0'  # Don't fail this step (SARIF already failed if needed)

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-${{ matrix.image }}'
  # Job 7: Comprehensive feedback
  post-comment:
    name: 'Post Validation Results Comment'
    needs: [setup, secret-scan, helm-lint, kubeconform, checkov, scan-images]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: 'Post Success Comment'
        if: |
          needs.setup.result == 'success' &&
          needs.secret-scan.result == 'success' &&
          needs.helm-lint.result == 'success' &&
          needs.kubeconform.result == 'success' &&
          needs.checkov.result == 'success' &&
          (needs.scan-images.result == 'success' || needs.scan-images.result == 'skipped')
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ✅ **Helm Chart Validation Successful**

            All Helm chart validation checks passed successfully! 🎉

            **Validation Results:**
            - � Secret Scanning: ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 📝 Helm Linting: ${{ needs.helm-lint.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 📝 Kubeconform: ${{ needs.kubeconform.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 🔒 Checkov: ${{ needs.checkov.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 🖼️ Image Scanning: ${{ (needs.scan-images.result == 'success' && '✅ Passed') || (needs.scan-images.result == 'skipped' && '⏭️ Skipped (no public images)') || '❌ Failed' }}

            **What was validated:**
            - � Secret scanning in PR diff (Gitleaks)
            - �📝 Helm chart syntax and best practices
            - 📝 Kubernetes manifest schema validation (kubeconform)
            - 🔒 Kubernetes security policies (Checkov)
            - 🖼️ Container image vulnerability scanning (Trivy)

            Great work! Your Helm chart looks good and secure.
          edit-mode: replace

      - name: 'Post Failure Comment'
        if: |
          needs.setup.result != 'success' ||
          needs.secret-scan.result != 'success' ||
          needs.helm-lint.result != 'success' ||
          needs.kubeconform.result != 'success' ||
          needs.checkov.result != 'success' ||
          (needs.scan-images.result != 'success' && needs.scan-images.result != 'skipped')
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ❌ **Helm Chart Validation Failed**

            One or more Helm chart validation checks failed.
            Please review the [Checks tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            **Validation Results:**
            - � Secret Scanning: ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 📝 Helm Linting: ${{ needs.helm-lint.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 📝 Kubeconform: ${{ needs.kubeconform.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 🔒 Checkov: ${{ needs.checkov.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 🖼️ Image Scanning: ${{ (needs.scan-images.result == 'success' && '✅ Passed') || (needs.scan-images.result == 'skipped' && '⏭️ Skipped (no public images)') || '❌ Failed' }}

            **What was checked:**
            - 🔍 Secret scanning in PR diff (Gitleaks)
            - 📝 Helm chart syntax and best practices
            - 📝 Kubernetes manifest schema validation (kubeconform)
            - 🔒 Kubernetes security policies (Checkov)
            - 🖼️ Container image vulnerability scanning (Trivy)

            Please fix the issues and push your changes.
          edit-mode: replace