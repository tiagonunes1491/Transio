name: 'CI - Publish Helm Chart to ACR'

on:
  push:
    branches:
      - development
    paths:
      - 'k8s/**/Chart.yaml'
      - 'k8s/**/values.yaml'
      - 'k8s/**/templates/**'

permissions:
  id-token: write
  contents: read  # write not needed unless you're committing code changes

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  publish-helm-charts:
    name: 'Publish Changed Helm Charts'
    runs-on: ubuntu-latest
    environment: shared

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full git history for comparison

      - name: 'Find changed Helm charts'
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            k8s/**/Chart.yaml
            k8s/**/values.yaml
            k8s/**/templates/**

      - name: 'Setup Helm'
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: 'Login to Azure'
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENTID_ART_PUSH }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Get ACR access token'
        if: steps.changed-files.outputs.any_changed == 'true'
        id: acr_token
        run: |
          ACR_TOKEN=$(az acr login --name ${{ vars.ACR_NAME }} --expose-token --output tsv --query accessToken)
          echo "token=${ACR_TOKEN}" >> $GITHUB_OUTPUT

      - name: 'Publish Helm Charts'
        id: publish
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          ACR_LOGIN_SERVER: "${{ vars.ACR_NAME }}.azurecr.io"
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          set -euo pipefail
          sudo apt-get update -qq && sudo apt-get install -y jq curl

          # Install yq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.47.1/yq_linux_amd64 \
            -o /usr/local/bin/yq && chmod +x /usr/local/bin/yq

          export HELM_EXPERIMENTAL_OCI=1

          chart_dirs=()
          for file in $CHANGED_FILES; do
            chart_dir=$(dirname "$file")
            while [[ "$chart_dir" != "." && ! -f "$chart_dir/Chart.yaml" ]]; do
              chart_dir=$(dirname "$chart_dir")
            done
            [[ -f "$chart_dir/Chart.yaml" ]] && chart_dirs+=("$chart_dir")
          done

          unique_chart_dirs=($(printf "%s\n" "${chart_dirs[@]}" | sort -u))

          # Login to ACR via Helm using token
          helm registry login $ACR_LOGIN_SERVER \
            --username 00000000-0000-0000-0000-000000000000 \
            --password "${{ steps.acr_token.outputs.token }}"

          for chart_dir in "${unique_chart_dirs[@]}"; do
            echo "ðŸ“¦ Processing: $chart_dir"
            chart_name=$(yq eval '.name' "$chart_dir/Chart.yaml")
            version=$(yq eval '.version' "$chart_dir/Chart.yaml" | tr -d '"')
            echo "ðŸ“¦ Packaging $chart_name:$version"
            helm package "$chart_dir" --destination /tmp
            helm push "/tmp/${chart_name}-${version}.tgz" oci://$ACR_LOGIN_SERVER/helm/${chart_name}
            echo "âœ… Pushed $chart_name:$version"
          done
