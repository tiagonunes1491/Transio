name: "CI - Backend PR Validation"
on: 
  pull_request:
    branches:
      - 'development'
    paths:
      - 'src/backend/Dockerfile'
      - 'src/backend/app/**'
jobs:
  check_changes:
    name: 'Check for file changes'
    runs-on: ubuntu-latest
    outputs:
      sca_required: ${{ steps.changed-file-requirements.outputs.any_changed }}
      lint_required: ${{ steps.changed-files-backend.outputs.all_changed_files }}
      trivy_required: ${{ steps.changed-file-docker.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changed-files to work properly
      
      - uses: tj-actions/changed-files@v44 # Use a specific version for stability
        id: changed-file-requirements
        with:
          # We tell the action to ONLY look for changes in this specific file.
          files: src/backend/requirements.txt
      
      - uses: tj-actions/changed-files@v44
        id: changed-files-backend
        with:
          # Get all changed Python files in backend directory
          files: |
            src/backend/**/*.py
          # Output the files as a comma-separated list
          separator: ','

      - uses: tj-actions/changed-files@v44
        id: changed-file-docker
        with:
          # Get all changed Python files in backend directory
          files: |
            src/backend/Dockerfile

  format_and_lint:
    needs: check_changes
    name: 'Format and Lint Check'
    if: needs.check_changes.outputs.lint_required != ''
    uses: ./.github/workflows/reusable-python-check.yml
    with:
      paths: ${{ needs.check_changes.outputs.lint_required }}

  static_analysis:
    needs: check_changes
    name: 'Static Analysis (SAST Scan)'
    if: needs.check_changes.outputs.lint_required != ''
    uses: ./.github/workflows/reusable-sast-scan.yml
    with:
      language: 'python'

  sca_analysis:
    needs: check_changes
    name: 'Software Composition Analysis (SCA Scan)'
    if: needs.check_changes.outputs.sca_required != ''
    uses: ./.github/workflows/reusable-sca-scan.yml
    with:
      paths: 'src/backend/requirements.txt'
    
  backend_tests:
    needs: check_changes
    name: 'Backend Unit Tests & Coverage'
    if: needs.check_changes.outputs.lint_required != ''
    uses: ./.github/workflows/reusable-backend-test.yml
    with:
      python-version: '3.11'
      coverage-threshold: 90

  # If any changes that require a new build are detected, run the container build and analysis job
  container_analysis:
    needs: check_changes
    name: 'Container Analyis (Dockerfile Scan, Container Scan, Container build)'
    if: needs.check_changes.outputs.sca_required != '' || needs.check_changes.outputs.lint_required != '' || needs.check_changes.outputs.trivy_required != ''  
    uses: ./.github/workflows/reusable-container-scan.yml
    with:
      path: 'src/backend/Dockerfile'
      container-name: 'backend-app'
      build-context: 'src/backend'

  post-comment:
    name: 'Post Validation Results Comment'
    needs: [check_changes, format_and_lint, static_analysis, sca_analysis, backend_tests, container_analysis]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: 'Post Success Comment'
        if: |
          (needs.check_changes.outputs.lint_required != '' && 
           needs.format_and_lint.result == 'success' && 
           needs.static_analysis.result == 'success' && 
           needs.backend_tests.result == 'success' &&
           (needs.sca_analysis.result == 'success' || needs.sca_analysis.result == 'skipped') &&
           (needs.container_analysis.result == 'success' || needs.container_analysis.result == 'skipped')) ||
          (needs.check_changes.outputs.lint_required == '' && 
           (needs.sca_analysis.result == 'success' || needs.sca_analysis.result == 'skipped') &&
           (needs.container_analysis.result == 'success' || needs.container_analysis.result == 'skipped'))
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ✅ **Backend Validation Successful**

            All backend validation checks passed successfully! 🎉

            **Validation Results:**
            - 🐍 Format & Lint: ${{ needs.format_and_lint.result == 'success' && '✅ Passed' || needs.format_and_lint.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 🔍 Static Analysis (SAST): ${{ needs.static_analysis.result == 'success' && '✅ Passed' || needs.static_analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 📦 Software Composition Analysis (SCA): ${{ needs.sca_analysis.result == 'success' && '✅ Passed' || needs.sca_analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 🧪 Unit Tests & Coverage: ${{ needs.backend_tests.result == 'success' && '✅ Passed' || needs.backend_tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 🐳 Container Analysis: ${{ needs.container_analysis.result == 'success' && '✅ Passed' || needs.container_analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}

            **What was validated:**
            - 🐍 Python code formatting and linting
            - 🔍 Static Application Security Testing (SAST)
            - 📦 Dependency vulnerability scanning (SCA)
            - 🧪 Unit tests with coverage requirements
            - 🐳 Container security scanning

            Great work! Your backend code looks good and secure.
          edit-mode: replace

      - name: 'Post Failure Comment'
        if: |
          needs.check_changes.outputs.lint_required != '' && 
          (needs.format_and_lint.result != 'success' || 
           needs.static_analysis.result != 'success' || 
           needs.backend_tests.result != 'success' ||
           (needs.sca_analysis.result != 'success' && needs.sca_analysis.result != 'skipped') ||
           (needs.container_analysis.result != 'success' && needs.container_analysis.result != 'skipped'))
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ❌ **Backend Validation Failed**

            One or more backend validation checks failed.
            Please review the [Checks tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

            **Validation Results:**
            - 🐍 Format & Lint: ${{ needs.format_and_lint.result == 'success' && '✅ Passed' || needs.format_and_lint.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 🔍 Static Analysis (SAST): ${{ needs.static_analysis.result == 'success' && '✅ Passed' || needs.static_analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 📦 Software Composition Analysis (SCA): ${{ needs.sca_analysis.result == 'success' && '✅ Passed' || needs.sca_analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 🧪 Unit Tests & Coverage: ${{ needs.backend_tests.result == 'success' && '✅ Passed' || needs.backend_tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
            - 🐳 Container Analysis: ${{ needs.container_analysis.result == 'success' && '✅ Passed' || needs.container_analysis.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}

            **What was checked:**
            - 🐍 Python code formatting and linting
            - 🔍 Static Application Security Testing (SAST)
            - 📦 Dependency vulnerability scanning (SCA)
            - 🧪 Unit tests with coverage requirements
            - 🐳 Container security scanning

            Please fix the issues and push your changes.
          edit-mode: replace

      - name: 'Post No Changes Comment'
        if: needs.check_changes.outputs.lint_required == '' && needs.check_changes.outputs.sca_required == '' && needs.check_changes.outputs.trivy_required == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ℹ️ **No Backend Changes Detected**

            No backend files were changed in this PR - validation skipped.

            If you expected backend validation to run, check that changes are in the `src/backend/` directory with the appropriate file extensions (`.py`, `requirements.txt`, `Dockerfile`).
          edit-mode: replace