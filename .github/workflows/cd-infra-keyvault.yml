name: 'CD - Bootstrap Key Vault'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      platform:
        description: 'Target platform'
        required: true
        default: 'swa'
        type: choice
        options:
        - swa
        - aks
      recover_keyvault:
        description: 'Recover existing Key Vault from soft delete'
        required: false
        default: false
        type: boolean

permissions:
  actions: write
  contents: read
  id-token: write

jobs:
  deploy:
    name: 'Deploy Bootstrap Key Vault'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}-${{ github.event.inputs.platform }}
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENTID_IAC_CONTRIBUTOR }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}


      - name: 'Deploy Key Vault Infrastructure'
        id: deploy_kv
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          PLATFORM: ${{ github.event.inputs.platform }}
          RG_NAME: ${{ vars.RG_NAME }}
          KEYVAULT: ${{ vars.KEYVAULT }}
          RECOVER: ${{ github.event.inputs.recover_keyvault }}
        run: |
          echo "üöÄ Deploying Key Vault bootstrap infrastructure..."
          echo "Environment: $ENVIRONMENT"
          echo "Platform: $PLATFORM"
          echo "Key Vault: $KEYVAULT"
          # Set RECOVER to false if it's not defined
          RECOVER="${RECOVER:-false}"
          echo "Key Vault recovery: $RECOVER"
          echo "Using resource group: $RG_NAME"
          
          # Verify resource group exists (fail if it doesn't)
          if ! az group show --name "$RG_NAME" --output none 2>/dev/null; then
            echo "‚ùå Resource group '$RG_NAME' does not exist. Please create it first."
            exit 1
          fi

          echo "‚úÖ Resource group '$RG_NAME' exists"

          # Set parameter file based on platform and environment
          PARAM_FILE="./infra/10-bootstrap-kv/$PLATFORM.$ENVIRONMENT.bicepparam"

          if [ ! -f "$PARAM_FILE" ]; then
            echo "‚ùå Parameter file not found: $PARAM_FILE"
            exit 1
          fi

          echo "Using parameter file: $PARAM_FILE"

          # Add deployment metadata
          deployment_name="kv-bootstrap-$(date +%Y%m%d%H%M%S)-${{ github.run_id }}"
      
          # Deploy with bicepparam file and recovery parameter
          echo "Deploying with recoverExistingVault=$RECOVER"
          
          az deployment group create \
            --name "$deployment_name" \
            --resource-group "$RG_NAME" \
            --template-file ./infra/10-bootstrap-kv/main.bicep \
            --parameters "$PARAM_FILE" recoverExistingVault=$RECOVER \
            --output json
            
          echo "‚úÖ Key Vault deployment completed successfully!"

          # Show deployment outputs
          echo "Deployment outputs:"
          az deployment group show \
            --name "$deployment_name" \
            --resource-group "$RG_NAME" \
            --query properties.outputs \
            --output json
          
          # Capture Key Vault name output (assumes output is named 'keyVaultName')
          KV_NAME=$(az deployment group show \
            --name "$deployment_name" \
            --resource-group "$RG_NAME" \
            --query properties.outputs.keyVaultName.value \
            --output tsv)
          echo "Captured Key Vault Name: $KV_NAME"
          echo "KV_NAME=$KV_NAME" >> $GITHUB_ENV

      - name: 'Tag Resource Group with Key Vault Name'
        if: success()
        run: |
          echo "üè∑Ô∏è Tagging resource group with Key Vault deployment information..."
          
          if [ -n "$KV_NAME" ]; then
            az tag create --resource-id "/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RG_NAME }}" \
              --tags "KV_NAME=$KV_NAME"
            
            echo "‚úÖ Successfully tagged resource group '${{ vars.RG_NAME }}' with Key Vault name"
            echo "üìã Key Vault Name: $KV_NAME"
            echo "üí° To retrieve later, use:"
            echo "   az tag list --resource-id \"/subscriptions/${{ vars.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ vars.RG_NAME }}\" --query 'properties.tags.KV_NAME' -o tsv"
          else
            echo "‚ùå KV_NAME is empty, not tagging resource group."
          fi

      - name: 'Trigger Key Vault Seeding'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'cd-infra-rotate-key.yml',
              ref: 'development',
              inputs: {
                environment: '${{ github.event.inputs.environment }}',
                platform: '${{ github.event.inputs.platform }}'
              }
            });
            console.log('üîë Triggered Key Vault seeding workflow');
            console.log('Environment:', '${{ github.event.inputs.environment }}');
            console.log('Platform:', '${{ github.event.inputs.platform }}');