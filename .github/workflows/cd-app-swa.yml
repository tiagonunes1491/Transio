name: 'CD - Deploy Static Content to SWA'

on:
  push:
    branches: [development, main]
    paths:
      # --- TRIGGER on changes to frontend static files ---
      - 'src/frontend/static/**'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

permissions:
  actions: write
  contents: read
  id-token: write

jobs:
  determine-environment:
    name: 'Determine Environment'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: 'Set Environment'
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  deploy-swa:
    name: 'Deploy to Static Web App'
    runs-on: ubuntu-latest
    needs: [determine-environment]
    environment: ${{ needs.determine-environment.outputs.environment }}-swa
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENTID_ARTIFACT_PUSH }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      - name: 'Set Environment Variables'
        run: |
          ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          
          # Use environment-specific variable for Static Web App name for flexibility
          # These should be configured as repository variables: SWA_NAME
          SWA_NAME="${{ vars.SWA_NAME }}"
          echo "SWA_NAME=$SWA_NAME" >> $GITHUB_ENV
          
          # Use environment-specific variable for resource group name for flexibility
          # These should be configured as repository variables: RG_NAME
          RG_NAME="${{ vars.RG_NAME }}"
          echo "RG_NAME=$RG_NAME" >> $GITHUB_ENV
      
      - name: 'Setup Node.js for SWA CLI'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 'Install Static Web Apps CLI'
        run: |
          npm install -g @azure/static-web-apps-cli
      
      - name: 'Deploy to Static Web App'
        run: |
          echo "üöÄ Deploying to Static Web App: $SWA_NAME in resource group: $RG_NAME"
          
          # Change to the static content directory
          cd ./src/frontend/static
          
          # Initialize SWA CLI (required by best practices)
          npx swa init --yes
          
          # Deploy using SWA CLI (authentication handled automatically via Azure CLI login)
          npx swa deploy --env production --verbose --resource-group "$RG_NAME" --app-name "$SWA_NAME"
          
          echo "‚úÖ Deployment completed successfully!"
      
      - name: 'Deployment Summary'
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìç Environment: $ENVIRONMENT"
          echo "üåê Static Web App: $SWA_NAME"
          echo "üìÇ Resource Group: $RG_NAME"
          echo ""
          echo "‚ÑπÔ∏è The Static Web App is now deployed and should be accessible via its default URL."
          echo "‚ÑπÔ∏è You can find the URL in the Azure portal or use: az staticwebapp show --name $SWA_NAME --resource-group $RG_NAME --query defaultHostname"