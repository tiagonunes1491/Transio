# Template for deploying shared infrastructure (ACR) using Azure Bicep templates
# This workflow is triggered manually to deploy the Azure Container Registry
name: 'CD - Shared Infrastructure (ACR)'

on:
  push:
    branches:
      - main
    paths:
      - 'infra/shared-infra.bicep'
      - 'infra/shared-infra-modules/**'
  workflow_dispatch:
jobs:
  what-if-and-deploy:
    name: 'What-If Analysis and Deploy'
    runs-on: ubuntu-latest
    environment: shared-protected
    permissions:
      contents: read
      id-token: write
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Login to Azure'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENTID_ART_CONT }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: 'Run What-If Analysis'
        id: whatif
        env:
          SHARED_RG_NAME: ${{ vars.SHARED_RG_NAME }}
        run: |
          echo "Running what-if analysis..."
          
          # Ensure resource group exists
          if ! az group show --name "${{ env.SHARED_RG_NAME }}" 2>/dev/null; then
            echo "Creating resource group..."
            az group create --name "${{ env.SHARED_RG_NAME }}" --location "${{ vars.AZURE_REGION }}"
          fi
          
          # Run what-if analysis
          set +e
          whatif_output=$(az deployment group what-if \
            --resource-group "${{ env.SHARED_RG_NAME }}" \
            --template-file ./infra/shared-infra.bicep \
            --parameters acrName="${{ vars.ACR_NAME }}" \
                         resourceLocation="${{ vars.AZURE_REGION }}" \
                         tags='{"environment":"shared","project":"${{ vars.PROJECT_NAME }}","owner":"GitHubActions"}' \
            --result-format FullResourcePayloads 2>&1)
          exit_code=$?
          set -e
          
          if [ $exit_code -ne 0 ]; then
            echo "‚ùå What-if analysis failed with exit code: $exit_code"
            echo "Error output:"
            echo "$whatif_output"
            exit 1
          fi
          
          echo "$whatif_output"
          
          # Check for changes
          if echo "$whatif_output" | grep -E -q "(Create|Modify|Delete|Deploy)"; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è CHANGES DETECTED - Deployment will proceed after review period"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected"
          fi
          
          # Save to summary
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## üîç What-If Analysis Results
          
          **Target Resource Group:** \`${{ env.SHARED_RG_NAME }}\`
          **ACR Name:** \`${{ vars.ACR_NAME }}\`
          
          ### Changes Preview:
          \`\`\`
          $whatif_output
          \`\`\`
          EOF


      - name: 'Review Period'
        if: steps.whatif.outputs.has-changes == 'true'
        run: |
          echo "::warning::‚è±Ô∏è REVIEW PERIOD: You have 5 minutes to review and cancel this workflow"
          echo ""
          echo "üõë TO CANCEL: Click 'Cancel workflow' in the GitHub Actions UI"
          echo ""
          echo "üìã Changes to be deployed:"
          echo "‚Ä¢ Resource Group: ${{ vars.SHARED_RG_NAME }}"
          echo "‚Ä¢ ACR Name: ${{ vars.ACR_NAME }}"
          echo "‚Ä¢ Environment: shared"
          echo ""
          
          # Countdown timer with better visibility
          for i in {300..1}; do
            if [ $((i % 60)) -eq 0 ]; then
              echo "‚è∞ Time remaining: $((i / 60)) minutes"
            elif [ $i -eq 30 ]; then
              echo "::warning::‚è∞ Time remaining: 30 seconds"
            elif [ $i -le 10 ]; then
              echo "::warning::‚è∞ Time remaining: $i seconds"
            fi
            sleep 1
          done
          
          echo "‚úÖ Review period complete. Proceeding with deployment..."

      - name: 'Deploy Infrastructure'
        if: steps.whatif.outputs.has-changes == 'true'
        env:
          SHARED_RG_NAME: ${{ vars.SHARED_RG_NAME }}
        run: |
          echo "üöÄ Deploying infrastructure..."
          
          # Add deployment metadata
          deployment_name="shared-infra-$(date +%Y%m%d%H%M%S)-${{ github.run_id }}"
          
          az deployment group create \
            --name "$deployment_name" \
            --resource-group "${{ env.SHARED_RG_NAME }}" \
            --template-file ./infra/shared-infra.bicep \
            --parameters acrName="${{ vars.ACR_NAME }}" \
                         resourceLocation="${{ vars.AZURE_REGION }}" \
                         tags='{"environment":"shared","project":"${{ vars.PROJECT_NAME }}","owner":"GitHubActions"}' \
            --verbose
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Show deployment outputs
          echo "Deployment outputs:"
          az deployment group show \
            --name "$deployment_name" \
            --resource-group "${{ env.SHARED_RG_NAME }}" \
            --query properties.outputs

      - name: 'No Changes Summary'
        if: steps.whatif.outputs.has-changes == 'false'
        run: |
          echo "‚úÖ Infrastructure is already up to date!"
          echo "No deployment needed."
          
          # Still show current state
          echo ""
          echo "Current ACR state:"
          az acr show --name "${{ vars.ACR_NAME }}" --resource-group "${{ vars.SHARED_RG_NAME }}" --query "{name:name,sku:sku.name,status:provisioningState}" -o table || echo "ACR not found"
