name: Deploy Documentation

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
      - development
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-docs.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.txt

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Build with MkDocs
        run: |
          mkdocs build --verbose --clean
        env:
          SITE_URL: ${{ steps.pages.outputs.base_url }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  # Deployment job
  deploy:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Test build job for PRs
  test-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.txt

      - name: Test MkDocs build
        run: |
          mkdocs build --verbose --clean

      - name: Check for broken links
        run: |
          # Simple check for common markdown issues
          find docs/ -name "*.md" -exec grep -l "]()" {} \; || true
          find docs/ -name "*.md" -exec grep -l "](#)" {} \; || true

      - name: Validate navigation
        run: |
          # Check that all nav items in mkdocs.yml have corresponding files
          python -c "
          import yaml
          import os
          
          with open('mkdocs.yml', 'r') as f:
              config = yaml.safe_load(f)
          
          nav = config.get('nav', [])
          missing_files = []
          
          def check_nav_item(item):
              if isinstance(item, dict):
                  for key, value in item.items():
                      if isinstance(value, str) and value.endswith('.md'):
                          file_path = os.path.join('docs', value)
                          if not os.path.exists(file_path):
                              missing_files.append(file_path)
                      elif isinstance(value, list):
                          for subitem in value:
                              check_nav_item(subitem)
              elif isinstance(item, str) and item.endswith('.md'):
                  file_path = os.path.join('docs', item)
                  if not os.path.exists(file_path):
                      missing_files.append(file_path)
          
          for item in nav:
              check_nav_item(item)
          
          if missing_files:
              print('Missing documentation files:')
              for f in missing_files:
                  print(f'  - {f}')
              exit(1)
          else:
              print('All navigation files exist.')
          "

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Documentation build test passed! The MkDocs site builds successfully with your changes.'
            })