# templates/database-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "secret-sharer-app.fullname" . }}-db
  labels:
    {{- include "secret-sharer-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  serviceName: {{ include "secret-sharer-app.fullname" . }}-db-headless # Headless service for StatefulSet
  replicas: {{ .Values.database.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "secret-sharer-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "secret-sharer-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      serviceAccountName: {{ .Values.database.serviceAccount.name}}
      automountServiceAccountToken: true # Ensure token is mounted for WI/CSI Driver
      
      terminationGracePeriodSeconds: 10
      # We will add securityContext for the pod later
      containers:
        - name: postgres
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag | default "15-alpine" }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: postgres # Refers to the containerPort named 'postgres' (5432)
            # Or, for a more thorough check, an exec probe (requires psql in the image):
            # exec:
            #   command:
            #   - sh
            #   - -c
            #   - PGPASSWORD=$POSTGRES_PASSWORD psql -h 127.0.0.1 -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
            initialDelaySeconds: {{ .Values.database.probes.liveness.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.database.probes.liveness.periodSeconds | default 30 }}
            timeoutSeconds: {{ .Values.database.probes.liveness.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.database.probes.liveness.failureThreshold | default 3 }}
            successThreshold: {{ .Values.database.probes.liveness.successThreshold | default 1 }}
          readinessProbe:
            tcpSocket: # A TCP check is usually sufficient for DB readiness
              port: postgres # Refers to the containerPort named 'postgres'
            # Or, an exec probe like the liveness one if preferred:
            # exec:
            #   command: ["sh", "-c", "PGPASSWORD=$POSTGRES_PASSWORD psql -h 127.0.0.1 -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'"]
            initialDelaySeconds: {{ .Values.database.probes.readiness.initialDelaySeconds | default 10 }} # Shorter delay for readiness after it's live
            periodSeconds: {{ .Values.database.probes.readiness.periodSeconds | default 15 }}
            timeoutSeconds: {{ .Values.database.probes.readiness.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.database.probes.readiness.failureThreshold | default 3 }}
            successThreshold: {{ .Values.database.probes.readiness.successThreshold | default 1 }}
          resources:
            limits:
              cpu: {{ .Values.database.resources.limits.cpu | default "1000m" }} # 1 CPU core
              memory: {{ .Values.database.resources.limits.memory | default "1Gi" }} # 1 GiB Memory
            requests:
              cpu: {{ .Values.database.resources.requests.cpu | default "250m" }} # 0.25 CPU core
              memory: {{ .Values.database.resources.requests.memory | default "512Mi" }} # 0.5 GiB Memory
          # ... env, volumeMounts ...
          env:
            - name: POSTGRES_DB
              value: {{ .Values.database.auth.database | quote }}
            # The following env vars point to the secrets mounted from the Key Vault
            # These will be used to create the database user and password
            - name: POSTGRES_USER
              value: "postgres" # Standard user for initial setup
            - name: POSTGRES_PASSWORD_FILE          
              value: /mnt/db-secrets-store/{{ .Values.database.keyVault.secrets.initPassword }} # postgres-password
              
            - name: APP_DB_USER_FILE
              value: /mnt/db-secrets-store/{{ .Values.backend.keyVault.secrets.dbUser }} # app-db-user
              
            - name: APP_DB_PASSWORD_FILE
              value: /mnt/db-secrets-store/{{ .Values.backend.keyVault.secrets.dbPassword }}      # app-db-password
              
            # The following env var is used to set the PGDATA path
            # This is where Postgres stores its data files
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/postgresql/data
            
            - name: db-secrets-store-inline
              mountPath: "/mnt/db-secrets-store" # Different mount path from backend
              readOnly: true

             # Mount the init script from the ConfigMap to create the database user
            - name: db-init-script-volume # Matches volume name below
              mountPath: /docker-entrypoint-initdb.d # Standard path for postgres init scripts
              readOnly: true 
          
      # Define the CSI Secrets Store Volume for the DB Init SPC ---
      volumes:
        - name: db-secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "secret-sharer-app.fullname" . }}-db-init-spc # Reference the DB SPC
                # Define the volume sourcing from the ConfigMap ---
        - name: db-init-script-volume
          configMap:
            name: {{ include "secret-sharer-app.fullname" . }}-db-init-script 
            # Make the script executable
            defaultMode: 0755 # rwxr-xr-x permissions

  volumeClaimTemplates:
    - metadata:
        name: db-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.database.persistence.size | default "1Gi" }}
        # storageClassName: {{ .Values.database.persistence.storageClass | default "default" }} # Uncomment if you need a specific storage class