# templates/backend-secretproviderclass.yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ include "secret-sharer-app.fullname" . }}-backend-spc
  labels:
    {{- include "secret-sharer-app.labels" . | nindent 4 }}
spec:
  provider: azure
  parameters:
    usePodIdentity: "false" # We will use Workload Identity; if true, it refers to the older Pod Identity v1
    useVMManagedIdentity: "false" # Not using VM managed identity directly for this
    clientID: {{ .Values.backend.keyVault.userAssignedIdentityClientID | quote }} 
    keyvaultName: {{ .Values.backend.keyVault.name | quote }} 
    cloudName: "" # Optional: AzurePublicCloud, AzureChinaCloud, etc. Defaults to AzurePublicCloud
    objects: |
      array:
        {{- if not .Values.cosmosdb.useManagedIdentity }}
        - |
          objectName: {{ .Values.backend.keyVault.secrets.cosmosDbKey }}
          objectType: secret
          objectAlias: cosmosDbKeyKeyVault # Alias for the mounted file, also used as key in K8s secret if synced
        {{- end }}
        - |
          objectName: {{ .Values.backend.keyVault.secrets.appMasterKey }}
          objectType: secret
          objectAlias: appMasterKeyKeyVault
    tenantId: {{ .Values.backend.keyVault.tenantId | quote }} # Your Azure Tenant ID

  # This section instructs the driver to create/update a Kubernetes Secret
  # with the fetched values. This is often easier for applications to consume.
  secretObjects:
    - secretName: {{ include "secret-sharer-app.fullname" . }}-backend-secrets # Name of the K8s Secret to create
      type: Opaque
      data:
        # These 'objectName' fields here refer to the 'objectAlias' from the 'objects' array above
        {{- if not .Values.cosmosdb.useManagedIdentity }}
        - objectName: cosmosDbKeyKeyVault 
          key: cosmosDbKey # The key name in the Kubernetes Secret
        {{- end }}
        - objectName: appMasterKeyKeyVault
          key: appMasterEncryptionKey # The key name in the Kubernetes Secret